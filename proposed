import math
import torch
import torch.nn as nn


class Mlp(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = nn.GELU()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        """
        input: (B, N, C)
        B = Batch size, N = patch_size * patch_size, C = dimension hidden_features and out_features
        output: (B, N, C)
        """
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x


class Attention(nn.Module):
    def __init__(self, dim, num_heads=16, attn_drop=0., proj_drop=0.):
        super().__init__()
        self.dim = dim
        self.num_heads = num_heads

        self.q = nn.Linear(dim, dim, bias=True)
        self.kv = nn.Linear(dim, dim * 2, bias=True)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

    def forward(self, x):
        """
        input: (B, N, C)
        B = Batch size, N = patch_size * patch_size, C = dimension for attention
        output: (B, N, C)
        """
        B, N, C = x.shape
        q = self.q(x).reshape(B, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)
        kv = self.kv(x).reshape(B, -1, 2, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        k, v = kv[0], kv[1]

        attn = (q @ k.transpose(-2, -1))
        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B, N, C)
        x = self.proj(x)
        x = self.proj_drop(x)

        return x


class GroupedPixelEmbedding(nn.Module):
    def __init__(self, in_feature_map_size=7, in_chans=3, embed_dim=128, n_groups=1):
        super().__init__()
        self.ifm_size = in_feature_map_size
        self.proj = nn.Conv2d(in_chans, embed_dim, kernel_size=3, stride=1, padding=1, groups=n_groups)
        self.batch_norm = nn.BatchNorm2d(embed_dim)
        self.relu = nn.ReLU(inplace=True)

    def forward(self, x):
        """
        input: (B, in_chans, in_feature_map_size, in_feature_map_size)
        output: (B, (after_feature_map_size x after_feature_map_size-2), embed_dim = C)
        """
        x = self.proj(x)
        x = self.relu(self.batch_norm(x))

        x = x.flatten(2).transpose(1, 2)

        after_feature_map_size = self.ifm_size

        return x, after_feature_map_size


class Block(nn.Module):
    def __init__(self, dim, num_heads, mlp_ratio=4, drop=0., attn_drop=0.):
        super().__init__()
        self.norm1 = nn.LayerNorm(dim)
        self.attn = Attention(dim, num_heads=num_heads, attn_drop=attn_drop, proj_drop=drop)
        self.norm2 = nn.LayerNorm(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, drop=drop)

    def forward(self, x):
        x = x + self.attn(self.norm1(x))
        x = x + self.mlp(self.norm2(x))
        return x


class DilatedConv(nn.Module):

    def __init__(self, in_channel, out_channel):
        super(DilatedConv, self).__init__()
        self.conv = nn.Conv2d(in_channel, out_channel, kernel_size=(3, 3), stride=(1, 1), padding=1)
        self.dla = nn.MaxPool2d(kernel_size=(3, 3), stride=1, padding=1, dilation=1)

    def forward(self, x):
        x1 = self.conv(x)
        y = self.dla(x1)
        return y


class ErosionConv(nn.Module):

    def __init__(self, in_channel, out_channel):
        super(ErosionConv, self).__init__()
        self.conv = nn.Conv2d(in_channel, out_channel, kernel_size=(3, 3), stride=(1, 1), padding=1)
        self.ero = nn.MaxPool2d(kernel_size=(3, 3), stride=1, padding=1, dilation=1)

    def forward(self, x):
        x1 = self.conv(x)
        x1 = x1 * (-1)
        x2 = self.ero(x1)
        y = x2 * (-1)
        return y


class DilatedConvA(nn.Module):

    def __init__(self, in_channel, out_channel):
        super(DilatedConvA, self).__init__()
        self.conv = nn.Conv2d(in_channel, out_channel, kernel_size=(1, 1), stride=(1, 1), padding=0)
        self.dla = nn.MaxPool2d(kernel_size=(1, 1), stride=1, padding=0, dilation=1)

    def forward(self, x):
        x1 = self.conv(x)
        y = self.dla(x1)
        return y


class ErosionConvA(nn.Module):

    def __init__(self, in_channel, out_channel):
        super(ErosionConvA, self).__init__()
        self.conv = nn.Conv2d(in_channel, out_channel, kernel_size=(1, 1), stride=(1, 1), padding=0)
        self.ero = nn.MaxPool2d(kernel_size=(1, 1), stride=1, padding=0, dilation=1)

    def forward(self, x):
        x1 = self.conv(x)
        x1 = x1 * (-1)
        x2 = self.ero(x1)
        y = x2 * (-1)
        return y


class DilatedConvB(nn.Module):

    def __init__(self, in_channel, out_channel):
        super(DilatedConvB, self).__init__()
        self.conv = nn.Conv2d(in_channel, out_channel, kernel_size=(5, 5), stride=(1, 1), padding=2)
        self.dla = nn.MaxPool2d(kernel_size=(5, 5), stride=1, padding=2, dilation=1)

    def forward(self, x):
        x1 = self.conv(x)
        y = self.dla(x1)
        return y


class ErosionConvB(nn.Module):

    def __init__(self, in_channel, out_channel):
        super(ErosionConvB, self).__init__()
        self.conv = nn.Conv2d(in_channel, out_channel, kernel_size=(5, 5), stride=(1, 1), padding=2)#padding=1
        self.ero = nn.MaxPool2d(kernel_size=(5, 5), stride=1, padding=2, dilation=1)

    def forward(self, x):
        x1 = self.conv(x)
        x1 = x1 * (-1)
        x2 = self.ero(x1)
        y = x2 * (-1)
        return y


class Attention_block(nn.Module):
    def __init__(self, F_g, F_l, F_int):
        super(Attention_block, self).__init__()
        self.W_g = nn.Sequential(
            nn.Conv2d(F_g, F_int, kernel_size=1, stride=1, padding=0, bias=True),
            nn.BatchNorm2d(F_int)
        )

        self.W_x = nn.Sequential(
            nn.Conv2d(F_l, F_int, kernel_size=1, stride=1, padding=0, bias=True),
            nn.BatchNorm2d(F_int)
        )

        self.psi = nn.Sequential(
            nn.Conv2d(F_int, 1, kernel_size=1, stride=1, padding=0, bias=True),
            nn.BatchNorm2d(1),
            nn.Sigmoid()
        )

        self.relu = nn.ReLU(inplace=True)

    def forward(self, g, x):
        g1 = self.W_g(g)
        x1 = self.W_x(x)
        psi = self.relu(g1 + x1)
        psi = self.psi(psi)

        return x * psi


class ConvUnit3D(nn.Module):

    def __init__(self, in_frame, out_frame, kernel, stride, padding):
        super(ConvUnit3D, self).__init__()
        self.conv = nn.Conv3d(in_frame, out_frame, kernel, stride, padding)
        self.bn = nn.BatchNorm3d(out_frame)
        self.relu = nn.ReLU()

    def forward(self, x):
        output = self.relu(self.bn(self.conv(x)))
        return output

class MultiScale3DSubmodule(nn.Module):
    """
    单个多尺度 3D 卷积子模块。
    输入: [batch, C, H, W]
    输出: [batch, 3*out_ch, H/2, W/2]
    """
    def __init__(self, in_ch, out_ch, dropout_rate=0.5):
        super().__init__()
        # 并行三条 3D 卷积分支：(C×1×1)、(C×3×3)、(C×5×5)
        self.conv_small = nn.Conv3d(1, out_ch, kernel_size=(in_ch,1,1), padding=(0,0,0))
        self.conv_med   = nn.Conv3d(1, out_ch, kernel_size=(in_ch,3,3), padding=(0,1,1))
        self.conv_large = nn.Conv3d(1, out_ch, kernel_size=(in_ch,5,5), padding=(0,2,2))

        # 每条分支后接 2D BatchNorm + ReLU
        self.bn_s = nn.BatchNorm2d(out_ch)
        self.bn_m = nn.BatchNorm2d(out_ch)
        self.bn_l = nn.BatchNorm2d(out_ch)
        self.relu = nn.ReLU(inplace=True)

        # 空间下采样 & Dropout
        self.pool    = nn.MaxPool2d(2, 2)
        self.dropout = nn.Dropout2d(dropout_rate)

    def forward(self, x):
        # x: [batch, C, H, W]
        x3d = x.unsqueeze(1)  # -> [batch, 1, C, H, W]

        f1 = self.conv_small(x3d)  # -> [batch, out_ch, 1, H, W]
        f2 = self.conv_med(x3d)    # -> [batch, out_ch, 1, H, W]
        f3 = self.conv_large(x3d)  # -> [batch, out_ch, 1, H, W]

        # 去掉深度维 -> [batch, out_ch, H, W]
        f1 = f1.squeeze(2)
        f2 = f2.squeeze(2)
        f3 = f3.squeeze(2)

        # BN + ReLU
        f1 = self.relu(self.bn_s(f1))
        f2 = self.relu(self.bn_m(f2))
        f3 = self.relu(self.bn_l(f3))

        # 拼接三路特征 -> [batch, 3*out_ch, H, W]
        out = torch.cat([f1, f2, f3], dim=1)

        # 下采样 & Dropout -> [batch, 3*out_ch, H/2, W/2]
        out = self.pool(out)
        out = self.dropout(out)
        return out


class P(nn.Module):

    def __init__(self, num_indices, branch_ch=32, dropout_rate=0.5):
        """
        :param num_indices: 输入的植被指数通道数 C
        :param branch_ch: 每个卷积分支的输出通道数 F
        :param dropout_rate: Dropout 比例
        """
        super().__init__()
        # 第一级子模块
        self.sub1 = MultiScale3DSubmodule(
            in_ch=num_indices,
            out_ch=branch_ch,
            dropout_rate=dropout_rate
        )
        # 第二级子模块，输入通道变为 3*branch_ch
        self.sub2 = MultiScale3DSubmodule(
            in_ch=3*branch_ch,
            out_ch=branch_ch,
            dropout_rate=dropout_rate
        )

    def forward_p(self, x):
        # x: [batch, C, H, W]
        feat1 = self.sub1(x)       # -> [batch, 3F, H/2, W/2]
        feat2 = self.sub2(feat1)   # -> [batch, 3F, H/4, W/4]

        # 如果需要把第二级特征上采样到第一级的空间尺寸
        if feat2.shape[2:] != feat1.shape[2:]:
            feat2 = F.interpolate(
                feat2,
                size=feat1.shape[2:],
                mode="bilinear",
                align_corners=False
            )

        # 最终拼接 -> [batch, 6F, H/2, W/2]
        out = torch.cat([feat1, feat2], dim=1)
        return out

class Spa_Spectrum(nn.Module):

    def __init__(self, hsi_channel):
        super(Spa_Spectrum, self).__init__()
        self.hsi_channel = hsi_channel

        # 定义具有不同卷积核大小的多个卷积单元
        # 第一层的不同卷积核
        self.conv1a = ConvUnit3D(1, 4, (7, 3, 3), stride=(2, 1, 1), padding=(2, 1, 1))
        self.conv1b = ConvUnit3D(1, 4, (5, 3, 3), stride=(2, 1, 1), padding=(1, 1, 1))
        self.conv1c = ConvUnit3D(1, 4, (3, 3, 3), stride=(2, 1, 1), padding=(0, 1, 1))

        # 第二层的不同卷积核
        self.conv2a = ConvUnit3D(12, 12, (7, 3, 3), stride=(1, 1, 1), padding=(3, 1, 1))
        self.conv2b = ConvUnit3D(12, 12, (5, 3, 3), stride=(1, 1, 1), padding=(2, 1, 1))
        self.conv2c = ConvUnit3D(12, 12, (3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))

        # 第三层的不同卷积核
        if hsi_channel > 100:
            self.conv3a = ConvUnit3D(36, 64, (28, 3, 3), stride=(2, 1, 1), padding=(0, 1, 1))
            self.conv3b = ConvUnit3D(36, 64, (35, 3, 3), stride=(2, 1, 1), padding=(4, 1, 1))
            self.conv3c = ConvUnit3D(36, 64, (42, 3, 3), stride=(2, 1, 1), padding=(7, 1, 1))
        else:
            self.conv3a = ConvUnit3D(36, 64, (11, 3, 3), stride=(2, 1, 1), padding=(0, 1, 1))
            self.conv3b = ConvUnit3D(36, 64, (14, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1))
            self.conv3c = ConvUnit3D(36, 64, (17, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1))

        self.avg = nn.AdaptiveAvgPool3d((None, None, None))

        # self.conv1 = ConvUnit3D(1, 8, (7, 3, 3), stride=(2, 1, 1), padding=(1, 1, 1))
        # self.conv2 = ConvUnit3D(8, 16, (7, 3, 3), stride=(2, 1, 1), padding=(0, 1, 1))
        # if hsi_channel > 100:
        #     self.conv3 = ConvUnit3D(16, 32, (28, 3, 3), stride=(2, 1, 1), padding=(0, 1, 1))
        # else:
        #     self.conv3 = ConvUnit3D(16, 32, (11, 3, 3), stride=(2, 1, 1), padding=(0, 1, 1))
        # self.avg = nn.AdaptiveAvgPool3d((None, None, None))

    def forward(self, x):
        # print(x.shape)

        # 并行使用第一层的不同卷积核
        y1a = self.conv1a(x)
        # print(y1a.shape)
        y1b = self.conv1b(x)
        y1c = self.conv1c(x)
        # print(y1c.shape)
        y1 = torch.cat([y1a, y1b, y1c], dim=1)
        # print(y1.shape)
        # 沿着通道维度拼接

        # 并行使用第二层的不同卷积核
        y2a = self.conv2a(y1)
        # print(y2a.shape)
        y2b = self.conv2b(y1)
        y2c = self.conv2c(y1)
        # print(y2c.shape)
        y2 = torch.cat([y2a, y2b, y2c], dim=1)
        # print(y2.shape)# 沿着通道维度

        # 并行使用第三层的不同卷积核
        y3a = self.conv3a(y2)
        # print(y3a.shape)
        y3b = self.conv3b(y2)
        # print(y3b.shape)
        y3c = self.conv3c(y2)
        # print(y3c.shape)
        y3 = torch.cat([y3a, y3b, y3c], dim=1)  # 沿着通道维度拼接

        # 应用自适应平均池化
        y = self.avg(y3)
        # 重塑输出以适应后续层或操作
        y = y.view(y.shape[0], y.shape[1] * y.shape[2], y.shape[3], y.shape[4])

        return y

###########################end plant#################


class MyTransformer(nn.Module):
    def __init__(self, img_size=224, in_chans=3, num_classes=1000, num_stages=3,
                n_groups=[32, 32, 32], embed_dims=[256, 128, 64], num_heads=[8, 4, 2], mlp_ratios=[1, 1, 1], depths=[2, 2, 2]):
        super().__init__()

        self.num_stages = num_stages

        new_bands = math.ceil(in_chans / n_groups[0]) * n_groups[0]
        self.pad = nn.ReplicationPad3d((0, 0, 0, 0, 0, new_bands - in_chans))

        for i in range(num_stages):
            patch_embed = GroupedPixelEmbedding(
                in_feature_map_size=img_size,
                in_chans=new_bands if i == 0 else embed_dims[i - 1],
                embed_dim=embed_dims[i],
                n_groups=n_groups[i]
            )

            block = nn.ModuleList([Block(
                dim=embed_dims[i],
                num_heads=num_heads[i],
                mlp_ratio=mlp_ratios[i],
                drop=0.,
                attn_drop=0.) for j in range(depths[i])])

            norm = nn.LayerNorm(embed_dims[i])

            setattr(self, f"patch_embed{i + 1}", patch_embed)
            setattr(self, f"block{i + 1}", block)
            setattr(self, f"norm{i + 1}", norm)


        self.conv1 = DilatedConv(1, 16)
        self.conv2 = ErosionConv(1, 16)

        #A模块
        self.convA1 = DilatedConvA(1, 16)
        self.convA2 = ErosionConvA(1, 16)
        # #下采样 卷积 卷积核为2*2时的参数设置
        # self.cnA1 = nn.Conv2d(16, 16, kernel_size=(1, 1), stride=(2, 2), padding=2)
        # self.cnA2 = nn.Conv2d(16, 16, kernel_size=(1, 1), stride=(2, 2), padding=2)


        #B模块 用于改变卷积核的大小
        self.convB1 = DilatedConvB(1, 16)
        self.convB2 = ErosionConvB(1, 16)
        # #上采样 转置卷积 输入通道 输出通道 卷积核 步长（注释）
        # self.upB1 = nn.ConvTranspose2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=0)
        # self.upB2 = nn.ConvTranspose2d(16, 16, kernel_size=(5, 5), stride=(1, 1), padding=0)

        self.Att5 = Attention_block(F_g=32, F_l=32, F_int=32)#注意力机制

        self.cn1 = nn.Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), padding=0)
        self.cn2 = nn.Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), padding=0)
        self.bn = nn.BatchNorm2d(32)
        self.relu = nn.ReLU()
        self.avg = nn.AdaptiveAvgPool2d((None, None))
        self.fl = nn.Flatten()#

        # 定义具有不同卷积核大小的多个卷积单元
        # 第一层的不同卷积核
        self.conv1a = ConvUnit3D(1, 4, (7, 3, 3), stride=(2, 1, 1), padding=(2, 1, 1))
        self.conv1b = ConvUnit3D(1, 4, (5, 3, 3), stride=(2, 1, 1), padding=(1, 1, 1))
        self.conv1c = ConvUnit3D(1, 4, (3, 3, 3), stride=(2, 1, 1), padding=(0, 1, 1))

        # 第二层的不同卷积核
        self.conv2a = ConvUnit3D(12, 12, (7, 3, 3), stride=(1, 1, 1), padding=(3, 1, 1))
        self.conv2b = ConvUnit3D(12, 12, (5, 3, 3), stride=(1, 1, 1), padding=(2, 1, 1))
        self.conv2c = ConvUnit3D(12, 12, (3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))

        # 第三层的不同卷积核
        self.conv3a = ConvUnit3D(36, 64, (11, 3, 3), stride=(2, 1, 1), padding=(0, 1, 1))
        self.conv3b = ConvUnit3D(36, 64, (14, 3, 3), stride=(2, 1, 1), padding=(1, 1, 1))
        self.conv3c = ConvUnit3D(36, 64, (17, 3, 3), stride=(2, 1, 1), padding=(3, 1, 1))

        self.avg = nn.AdaptiveAvgPool3d((None, None, None))

        # self.head = nn.Linear(embed_dims[-1]+49, num_classes)
        self.head = nn.Linear(embed_dims[-1]+98, num_classes)# 只有pvt时的Head
        # self.head = nn.Linear(embed_dims[-1] * 2, num_classes)  # 只有pvt时的Head

    def forward_features(self, x):
        # (bs, 1, n_bands, patch size (ps, of HSI), ps)
        x = self.pad(x).squeeze(dim=1)
        B = x.shape[0]

        for i in range(self.num_stages):
            patch_embed = getattr(self, f"patch_embed{i + 1}")
            block = getattr(self, f"block{i + 1}")
            norm = getattr(self, f"norm{i + 1}")

            x, s = patch_embed(x)  # s = feature map size after patch embedding
            for blk in block:
                x = blk(x)

            x = norm(x)

            if i != self.num_stages - 1:
                x = x.reshape(B, s, s, -1).permute(0, 3, 1, 2).contiguous()

        return x




    def forward_lidar_features(self, x):
        # (bs, 1, #n_bands#, patch size (ps, of HSI), ps)
        x1 = self.cn1(self.conv1(x))
        x2 = self.cn2(self.conv2(x))

        # 多尺度 padding改变（不使用上采样）（part 1）
        x3 = self.cn1(self.convA1(x))
        x4 = self.cn2(self.convA2(x))
        x5 = self.cn1(self.convB1(x))
        x6 = self.cn2(self.convB2(x))

        # #part 2
        # #B模块
        # x3 = self.convB1(x)
        # x4 = self.convB2(x)
        # x5 = self.upB1(x3)
        # x6 = self.upB2(x4)
        # x7 = self.cn1(x5)
        # x8 = self.cn2(x6)
        # # print(x7.shape, x8.shape)
        # #A模块
        # x9 = self.convA1(x)
        # x10 = self.convA2(x)
        # x11 = self.cn1(x9)
        # x12 = self.cn2(x10)
        # x = x1 + x2 + x7 + x8 + x11 + x12 #part 2

        x = x1 + x2 + x3 + x4 + x5 + x6 #part 1
        # x = x1 + x2#(原始：不使用多尺度)
        # x = self.Att5(x1,x2)#注意力机制
        x = self.bn(x)
        x = self.relu(x)
        x = self.avg(x)
        # x = self.fl(x)#
        return x


    def forward_plant_features(self, x):
        # print(x.shape)

        # 并行使用第一层的不同卷积核
        y1a = self.conv1a(x)
        # print(y1a.shape)
        y1b = self.conv1b(x)
        y1c = self.conv1c(x)
        # print(y1c.shape)
        y1 = torch.cat([y1a, y1b, y1c], dim=1)
        # print(y1.shape)
        # 沿着通道维度拼接

        # 并行使用第二层的不同卷积核
        y2a = self.conv2a(y1)
        # print(y2a.shape)
        y2b = self.conv2b(y1)
        y2c = self.conv2c(y1)
        # print(y2c.shape)
        y2 = torch.cat([y2a, y2b, y2c], dim=1)
        # print(y2.shape)# 沿着通道维度

        # 并行使用第三层的不同卷积核
        y3a = self.conv3a(y2)
        # print(y3a.shape)
        y3b = self.conv3b(y2)
        # print(y3b.shape)
        y3c = self.conv3c(y2)
        # print(y3c.shape)
        y3 = torch.cat([y3a, y3b, y3c], dim=1)  # 沿着通道维度拼接

        # 应用自适应平均池化
        y = self.avg(y3)
        # 重塑输出以适应后续层或操作
        y = y.view(y.shape[0], y.shape[1] * y.shape[2], y.shape[3], y.shape[4])

        return y
