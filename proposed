import math
import torch
import torch.nn as nn


class Mlp(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, drop=0.):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = nn.GELU()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        """
        input: (B, N, C)
        B = Batch size, N = patch_size * patch_size, C = dimension hidden_features and out_features
        output: (B, N, C)
        """
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x


class Attention(nn.Module):
    def __init__(self, dim, num_heads=16, attn_drop=0., proj_drop=0.):
        super().__init__()
        self.dim = dim
        self.num_heads = num_heads

        self.q = nn.Linear(dim, dim, bias=True)
        self.kv = nn.Linear(dim, dim * 2, bias=True)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

    def forward(self, x):
        """
        input: (B, N, C)
        B = Batch size, N = patch_size * patch_size, C = dimension for attention
        output: (B, N, C)
        """
        B, N, C = x.shape
        q = self.q(x).reshape(B, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)
        kv = self.kv(x).reshape(B, -1, 2, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        k, v = kv[0], kv[1]

        attn = (q @ k.transpose(-2, -1))
        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B, N, C)
        x = self.proj(x)
        x = self.proj_drop(x)

        return x


class GroupedPixelEmbedding(nn.Module):
    def __init__(self, in_feature_map_size=7, in_chans=3, embed_dim=128, n_groups=1):
        super().__init__()
        self.ifm_size = in_feature_map_size
        self.proj = nn.Conv2d(in_chans, embed_dim, kernel_size=3, stride=1, padding=1, groups=n_groups)
        self.batch_norm = nn.BatchNorm2d(embed_dim)
        self.relu = nn.ReLU(inplace=True)

    def forward(self, x):
        """
        input: (B, in_chans, in_feature_map_size, in_feature_map_size)
        output: (B, (after_feature_map_size x after_feature_map_size-2), embed_dim = C)
        """
        x = self.proj(x)
        x = self.relu(self.batch_norm(x))

        x = x.flatten(2).transpose(1, 2)

        after_feature_map_size = self.ifm_size

        return x, after_feature_map_size


class Block(nn.Module):
    def __init__(self, dim, num_heads, mlp_ratio=4, drop=0., attn_drop=0.):
        super().__init__()
        self.norm1 = nn.LayerNorm(dim)
        self.attn = Attention(dim, num_heads=num_heads, attn_drop=attn_drop, proj_drop=drop)
        self.norm2 = nn.LayerNorm(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, drop=drop)

    def forward(self, x):
        x = x + self.attn(self.norm1(x))
        x = x + self.mlp(self.norm2(x))
        return x


class DilatedConv(nn.Module):

    def __init__(self, in_channel, out_channel):
        super(DilatedConv, self).__init__()
        self.conv = nn.Conv2d(in_channel, out_channel, kernel_size=(3, 3), stride=(1, 1), padding=1)
        self.dla = nn.MaxPool2d(kernel_size=(3, 3), stride=1, padding=1, dilation=1)

    def forward(self, x):
        x1 = self.conv(x)
        y = self.dla(x1)
        return y


class ErosionConv(nn.Module):

    def __init__(self, in_channel, out_channel):
        super(ErosionConv, self).__init__()
        self.conv = nn.Conv2d(in_channel, out_channel, kernel_size=(3, 3), stride=(1, 1), padding=1)
        self.ero = nn.MaxPool2d(kernel_size=(3, 3), stride=1, padding=1, dilation=1)

    def forward(self, x):
        x1 = self.conv(x)
        x1 = x1 * (-1)
        x2 = self.ero(x1)
        y = x2 * (-1)
        return y


class DilatedConvA(nn.Module):

    def __init__(self, in_channel, out_channel):
        super(DilatedConvA, self).__init__()
        self.conv = nn.Conv2d(in_channel, out_channel, kernel_size=(1, 1), stride=(1, 1), padding=0)
        self.dla = nn.MaxPool2d(kernel_size=(1, 1), stride=1, padding=0, dilation=1)

    def forward(self, x):
        x1 = self.conv(x)
        y = self.dla(x1)
        return y


class ErosionConvA(nn.Module):

    def __init__(self, in_channel, out_channel):
        super(ErosionConvA, self).__init__()
        self.conv = nn.Conv2d(in_channel, out_channel, kernel_size=(1, 1), stride=(1, 1), padding=0)
        self.ero = nn.MaxPool2d(kernel_size=(1, 1), stride=1, padding=0, dilation=1)

    def forward(self, x):
        x1 = self.conv(x)
        x1 = x1 * (-1)
        x2 = self.ero(x1)
        y = x2 * (-1)
        return y


class DilatedConvB(nn.Module):

    def __init__(self, in_channel, out_channel):
        super(DilatedConvB, self).__init__()
        self.conv = nn.Conv2d(in_channel, out_channel, kernel_size=(5, 5), stride=(1, 1), padding=2)
        self.dla = nn.MaxPool2d(kernel_size=(5, 5), stride=1, padding=2, dilation=1)

    def forward(self, x):
        x1 = self.conv(x)
        y = self.dla(x1)
        return y


class ErosionConvB(nn.Module):

    def __init__(self, in_channel, out_channel):
        super(ErosionConvB, self).__init__()
        self.conv = nn.Conv2d(in_channel, out_channel, kernel_size=(5, 5), stride=(1, 1), padding=2)#padding=1
        self.ero = nn.MaxPool2d(kernel_size=(5, 5), stride=1, padding=2, dilation=1)

    def forward(self, x):
        x1 = self.conv(x)
        x1 = x1 * (-1)
        x2 = self.ero(x1)
        y = x2 * (-1)
        return y


class Attention_block(nn.Module):
    def __init__(self, F_g, F_l, F_int):
        super(Attention_block, self).__init__()
        self.W_g = nn.Sequential(
            nn.Conv2d(F_g, F_int, kernel_size=1, stride=1, padding=0, bias=True),
            nn.BatchNorm2d(F_int)
        )

        self.W_x = nn.Sequential(
            nn.Conv2d(F_l, F_int, kernel_size=1, stride=1, padding=0, bias=True),
            nn.BatchNorm2d(F_int)
        )

        self.psi = nn.Sequential(
            nn.Conv2d(F_int, 1, kernel_size=1, stride=1, padding=0, bias=True),
            nn.BatchNorm2d(1),
            nn.Sigmoid()
        )

        self.relu = nn.ReLU(inplace=True)

    def forward(self, g, x):
        g1 = self.W_g(g)
        x1 = self.W_x(x)
        psi = self.relu(g1 + x1)
        psi = self.psi(psi)

        return x * psi


class ConvUnit3D(nn.Module):

    def __init__(self, in_frame, out_frame, kernel, stride, padding):
        super(ConvUnit3D, self).__init__()
        self.conv = nn.Conv3d(in_frame, out_frame, kernel, stride, padding)
        self.bn = nn.BatchNorm3d(out_frame)
        self.relu = nn.ReLU()

    def forward(self, x):
        output = self.relu(self.bn(self.conv(x)))
        return output


class Spa_Spectrum(nn.Module):

    def __init__(self, hsi_channel):
        super(Spa_Spectrum, self).__init__()
        self.hsi_channel = hsi_channel

        # 定义具有不同卷积核大小的多个卷积单元
        # 第一层的不同卷积核
        self.conv1a = ConvUnit3D(1, 4, (7, 3, 3), stride=(2, 1, 1), padding=(2, 1, 1))
        self.conv1b = ConvUnit3D(1, 4, (5, 3, 3), stride=(2, 1, 1), padding=(1, 1, 1))
        self.conv1c = ConvUnit3D(1, 4, (3, 3, 3), stride=(2, 1, 1), padding=(0, 1, 1))

        # 第二层的不同卷积核
        self.conv2a = ConvUnit3D(12, 12, (7, 3, 3), stride=(1, 1, 1), padding=(3, 1, 1))
        self.conv2b = ConvUnit3D(12, 12, (5, 3, 3), stride=(1, 1, 1), padding=(2, 1, 1))
        self.conv2c = ConvUnit3D(12, 12, (3, 3, 3), stride=(1, 1, 1), padding=(1, 1, 1))

        # 第三层的不同卷积核
        if hsi_channel > 100:
            self.conv3a = ConvUnit3D(36, 64, (28, 3, 3), stride=(2, 1, 1), padding=(0, 1, 1))
            self.conv3b = ConvUnit3D(36, 64, (35, 3, 3), stride=(2, 1, 1), padding=(4, 1, 1))
            self.conv3c = ConvUnit3D(36, 64, (42, 3, 3), stride=(2, 1, 1), padding=(7, 1, 1))
        else:
            self.conv3a = ConvUnit3D(36, 64, (11, 3, 3), stride=(2, 1, 1), padding=(0, 1, 1))
            self.conv3b = ConvUnit3D(36, 64, (14, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1))
            self.conv3c = ConvUnit3D(36, 64, (17, 3, 3), stride=(1, 1, 1), padding=(0, 1, 1))

        self.avg = nn.AdaptiveAvgPool3d((None, None, None))

        # self.conv1 = ConvUnit3D(1, 8, (7, 3, 3), stride=(2, 1, 1), padding=(1, 1, 1))
        # self.conv2 = ConvUnit3D(8, 16, (7, 3, 3), stride=(2, 1, 1), padding=(0, 1, 1))
        # if hsi_channel > 100:
        #     self.conv3 = ConvUnit3D(16, 32, (28, 3, 3), stride=(2, 1, 1), padding=(0, 1, 1))
        # else:
        #     self.conv3 = ConvUnit3D(16, 32, (11, 3, 3), stride=(2, 1, 1), padding=(0, 1, 1))
        # self.avg = nn.AdaptiveAvgPool3d((None, None, None))

    def forward(self, x):
        # print(x.shape)

        # 并行使用第一层的不同卷积核
        y1a = self.conv1a(x)
        # print(y1a.shape)
        y1b = self.conv1b(x)
        y1c = self.conv1c(x)
        # print(y1c.shape)
        y1 = torch.cat([y1a, y1b, y1c], dim=1)
        # print(y1.shape)
        # 沿着通道维度拼接

        # 并行使用第二层的不同卷积核
        y2a = self.conv2a(y1)
        # print(y2a.shape)
        y2b = self.conv2b(y1)
        y2c = self.conv2c(y1)
        # print(y2c.shape)
        y2 = torch.cat([y2a, y2b, y2c], dim=1)
        # print(y2.shape)# 沿着通道维度

        # 并行使用第三层的不同卷积核
        y3a = self.conv3a(y2)
        # print(y3a.shape)
        y3b = self.conv3b(y2)
        # print(y3b.shape)
        y3c = self.conv3c(y2)
        # print(y3c.shape)
        y3 = torch.cat([y3a, y3b, y3c], dim=1)  # 沿着通道维度拼接

        # 应用自适应平均池化
        y = self.avg(y3)
        # 重塑输出以适应后续层或操作
        y = y.view(y.shape[0], y.shape[1] * y.shape[2], y.shape[3], y.shape[4])

        return y
